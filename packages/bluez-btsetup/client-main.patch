diff --git a/main.c b/ports/builddir/bluez-5.44/client/main.c
index e1198a8..75c6135 100644
--- main.c.orig
+++ main.c
@@ -46,6 +46,11 @@
 #include "gatt.h"
 #include "advertising.h"
 
+/* axiom patch, unix socket command interface */
+#include "unixsocket.h"
+extern guint us_use_unix_socket_backend;
+/* axiom patch end */
+
 /* String display constants */
 #define COLORED_NEW	COLOR_GREEN "NEW" COLOR_OFF
 #define COLORED_CHG	COLOR_YELLOW "CHG" COLOR_OFF
@@ -73,6 +78,8 @@ static GList *ctrl_list;
 
 static guint input = 0;
 
+
+
 static const char * const agent_arguments[] = {
 	"on",
 	"off",
@@ -101,7 +108,8 @@ static gboolean input_handler(GIOChannel *channel, GIOCondition condition,
 							gpointer user_data)
 {
 	if (condition & G_IO_IN) {
-		rl_callback_read_char();
+		if(! us_use_unix_socket_backend)
+			rl_callback_read_char();
 		return TRUE;
 	}
 
@@ -155,7 +163,12 @@ static void disconnect_handler(DBusConnection *connection, void *user_data)
 	default_ctrl = NULL;
 }
 
-static void print_adapter(GDBusProxy *proxy, const char *description)
+/* axiom patch, unix socket command interface */
+/* print_adapter() will be called from different part of code and various callbacks
+ * and we want to append reply only for command "list"
+ */
+
+static void us_print_adapter(GDBusProxy *proxy, const char *description)
 {
 	DBusMessageIter iter;
 	const char *address, *name;
@@ -170,16 +183,69 @@ static void print_adapter(GDBusProxy *proxy, const char *description)
 	else
 		name = "<unknown>";
 
-	rl_printf("%s%s%sController %s %s %s\n",
-				description ? "[" : "",
-				description ? : "",
-				description ? "] " : "",
+	/* axiom patch, unix socket command interface */
+	/* NOTE: we don't need decription dependent prints, and skip if there is a description */
+	if (us_use_unix_socket_backend && description == NULL)
+	{
+		unix_socket_reply_append ( "Controller %s %s %s\n",
 				address, name,
 				default_ctrl &&
 				default_ctrl->proxy == proxy ?
 				"[default]" : "");
+	}
+	/* axiom patch end */
+}
+/* axiom patch end */
+
+static void print_adapter(GDBusProxy *proxy, const char *description)
+{
+	DBusMessageIter iter;
+	const char *address, *name;
+
+	if (g_dbus_proxy_get_property(proxy, "Address", &iter) == FALSE)
+		return;
+
+	dbus_message_iter_get_basic(&iter, &address);
+
+	if (g_dbus_proxy_get_property(proxy, "Alias", &iter) == TRUE)
+		dbus_message_iter_get_basic(&iter, &name);
+	else
+		name = "<unknown>";
+
+	rl_printf("%s%s%sController %s %s %s\n",
+			description ? "[" : "",
+			description ? : "",
+			description ? "] " : "",
+			address, name,
+			default_ctrl &&
+			default_ctrl->proxy == proxy ?
+				"[default]" : "");
+
+}
+
+/* axiom patch, unix socket command interface */
+/* print_device() will be called from different part of code and various callbacks
+ * and we want to append reply only for command "devices"
+ */
+
+static void us_print_device(GDBusProxy *proxy, const char *description)
+{
+	DBusMessageIter iter;
+	const char *address, *name;
+
+	if (g_dbus_proxy_get_property(proxy, "Address", &iter) == FALSE)
+		return;
+
+	dbus_message_iter_get_basic(&iter, &address);
+
+	if (g_dbus_proxy_get_property(proxy, "Alias", &iter) == TRUE)
+		dbus_message_iter_get_basic(&iter, &name);
+	else
+		name = "<unknown>";
 
+	unix_socket_reply_append ("%s %s\n", address, name);
 }
+/* axiom patch end */
 
 static void print_device(GDBusProxy *proxy, const char *description)
 {
@@ -227,15 +293,37 @@ static void print_iter(const char *label, const char *name,
 	case DBUS_TYPE_STRING:
 	case DBUS_TYPE_OBJECT_PATH:
 		dbus_message_iter_get_basic(iter, &valstr);
+
+		/* axiom patch, unix socket command interface */
+		/* Name, Icon, append only if 'info' command was the caller */
+		if (us_use_unix_socket_backend && (*label == '\t'))
+			unix_socket_reply_append ("%s%s: %s\n", label, name, valstr);
+		/* axiom patch end */
+
 		rl_printf("%s%s: %s\n", label, name, valstr);
 		break;
 	case DBUS_TYPE_BOOLEAN:
 		dbus_message_iter_get_basic(iter, &valbool);
+
+		/* axiom patch, unix socket command interface */
+		/* Paired, Trusted, Connected, append only if 'info' command was the caller */
+		if (us_use_unix_socket_backend && (*label == '\t'))
+			unix_socket_reply_append ("%s%s: %s\n", label, name,
+					valbool == TRUE ? "yes" : "no");
+		/* axiom patch end */
+
 		rl_printf("%s%s: %s\n", label, name,
 					valbool == TRUE ? "yes" : "no");
 		break;
 	case DBUS_TYPE_UINT32:
 		dbus_message_iter_get_basic(iter, &valu32);
+
+		/* axiom patch, unix socket command interface */
+		/* Class, append only if 'info' command was the caller */
+		if (us_use_unix_socket_backend && (*label == '\t'))
+			unix_socket_reply_append ("%s%s: 0x%06x\n", label, name, valu32);
+		/* axiom patch end */
+
 		rl_printf("%s%s: 0x%06x\n", label, name, valu32);
 		break;
 	case DBUS_TYPE_UINT16:
@@ -244,6 +332,13 @@ static void print_iter(const char *label, const char *name,
 		break;
 	case DBUS_TYPE_INT16:
 		dbus_message_iter_get_basic(iter, &vals16);
+
+		/* axiom patch, unix socket command interface */
+		/* RSSI, append only if 'info' command was the caller */
+		if (us_use_unix_socket_backend && (*label == '\t'))
+			unix_socket_reply_append ("%s%s: %d\n", label, name, vals16);
+		/* axiom patch end */
+
 		rl_printf("%s%s: %d\n", label, name, vals16);
 		break;
 	case DBUS_TYPE_BYTE:
@@ -769,7 +864,17 @@ static void cmd_list(const char *arg)
 	for (list = g_list_first(ctrl_list); list; list = g_list_next(list)) {
 		struct adapter *adapter = list->data;
 		print_adapter(adapter->proxy, NULL);
+		
+		/* axiom patch, unix socket command interface */
+		if(us_use_unix_socket_backend)
+			us_print_adapter(adapter->proxy, NULL);
+		/* axiom patch end */
 	}
+	
+	/* axiom patch, unix socket command interface */
+	if(us_use_unix_socket_backend)
+		unix_socket_write_reply();
+	/* axiom patch end */
 }
 
 static void cmd_show(const char *arg)
@@ -839,11 +944,27 @@ static void cmd_devices(const char *arg)
 	if (check_default_ctrl() == FALSE)
 		return;
 
+	/* axiom patch, unix socket command interface */
+	/* NOTE: dummy desctiption line to simplify parsing procedure */
+	if(us_use_unix_socket_backend)
+		unix_socket_reply_append ("%s\n", "Devices found:");
+	/* axiom patch end */
+
 	for (ll = g_list_first(default_ctrl->devices);
 			ll; ll = g_list_next(ll)) {
 		GDBusProxy *proxy = ll->data;
 		print_device(proxy, NULL);
+		
+		/* axiom patch, unix socket command interface */
+		if(us_use_unix_socket_backend)
+			us_print_device(proxy, NULL);
+		/* axiom patch end */
 	}
+
+	/* axiom patch, unix socket command interface */
+	if(us_use_unix_socket_backend)
+		unix_socket_write_reply();
+	/* axiom patch end */
 }
 
 static void cmd_paired_devices(const char *arg)
@@ -1024,12 +1145,34 @@ static void start_discovery_reply(DBusMessage *message, void *user_data)
 	dbus_error_init(&error);
 
 	if (dbus_set_error_from_message(&error, message) == TRUE) {
+
+		/* axiom patch, unix socket command interface */
+		if(us_use_unix_socket_backend)
+		{
+			unix_socket_reply_append ("Failed to %s discovery: %s\n",
+					enable == TRUE ? "start" : "stop", error.name);
+			unix_socket_write_reply();
+		}
+		/* axiom patch end */
+
 		rl_printf("Failed to %s discovery: %s\n",
 				enable == TRUE ? "start" : "stop", error.name);
 		dbus_error_free(&error);
 		return;
 	}
 
+	/* axiom patch, unix socket command interface */
+	if(us_use_unix_socket_backend)
+	{
+		/* we are interested only in "started" event */
+		if (enable == TRUE)
+		{
+			unix_socket_reply_append ("Discovery %s", "started");
+			unix_socket_write_reply();
+		}
+	}
+	/* axiom patch end */
+
 	rl_printf("Discovery %s\n", enable == TRUE ? "started" : "stopped");
 }
 
@@ -1356,6 +1499,11 @@ static void cmd_info(const char *arg)
 	dbus_message_iter_get_basic(&iter, &address);
 	rl_printf("Device %s\n", address);
 
+	/* axiom patch, unix socket command interface */
+	if (us_use_unix_socket_backend)
+		unix_socket_reply_append ("Device %s\n", address);
+	/* axiom patch end */
+
 	print_property(proxy, "Name");
 	print_property(proxy, "Alias");
 	print_property(proxy, "Class");
@@ -1372,6 +1520,11 @@ static void cmd_info(const char *arg)
 	print_property(proxy, "ServiceData");
 	print_property(proxy, "RSSI");
 	print_property(proxy, "TxPower");
+	
+	/* axiom patch, unix socket command interface */
+	if (us_use_unix_socket_backend)
+		unix_socket_write_reply ();
+	/* axiom patch end*/
 }
 
 static void pair_reply(DBusMessage *message, void *user_data)
@@ -1386,6 +1539,14 @@ static void pair_reply(DBusMessage *message, void *user_data)
 		return;
 	}
 
+	/* axiom patch, unix socket command interface */
+	if (us_use_unix_socket_backend)
+	{
+		unix_socket_reply_append ("%s\n", "Pairing successful");
+		unix_socket_write_reply ();
+	}
+	/* axiom patch end*/
+
 	rl_printf("Pairing successful\n");
 }
 
@@ -1420,6 +1581,16 @@ static void cmd_trust(const char *arg)
 
 	str = g_strdup_printf("%s trust", arg);
 
+	/* axiom patch, unix socket command interface */
+	if (us_use_unix_socket_backend)
+	{
+		/* normally, this report would get printed in generic_callback ()
+		 * but we need dedicated reply only for trust command */
+		unix_socket_reply_append ("Device %s: trust succeeded\n", arg);
+		unix_socket_write_reply();
+	}
+	/* axiom patch end */
+
 	if (g_dbus_proxy_set_property_basic(proxy, "Trusted",
 					DBUS_TYPE_BOOLEAN, &trusted,
 					generic_callback, str, g_free) == TRUE)
@@ -2264,6 +2435,13 @@ done:
 	free(input);
 }
 
+/* axiom patch, allow unix socket command interface */
+void clent_process_command (gchar *cmd)
+{
+	rl_handler(cmd);
+}
+/* axiom patch end */
+
 static gboolean signal_handler(GIOChannel *channel, GIOCondition condition,
 							gpointer user_data)
 {
@@ -2378,6 +2556,8 @@ static void client_ready(GDBusClient *client, void *user_data)
 		input = setup_standard_input();
 }
 
+
+
 int main(int argc, char *argv[])
 {
 	GOptionContext *context;
@@ -2385,10 +2565,22 @@ int main(int argc, char *argv[])
 	GDBusClient *client;
 	guint signal;
 
+	/* axiom patch, allow unix socket command interface */
+	if(argc > 2 && !strcmp(argv[1], "--unix-socket-backend"))
+	{
+		us_use_unix_socket_backend = 1;
+		printf("Unix socket backend: %s\n", argv[2]);
+		
+		argc = 0; /* do not process arguments by default code */
+	}
+	/* axiom patch end */
+
 	context = g_option_context_new(NULL);
 	g_option_context_add_main_entries(context, options, NULL);
 
-	if (g_option_context_parse(context, &argc, &argv, &error) == FALSE) {
+	
+	if (g_option_context_parse(context, &argc, &argv, &error) == FALSE) 
+	{
 		if (error != NULL) {
 			g_printerr("%s\n", error->message);
 			g_error_free(error);
@@ -2399,7 +2591,8 @@ int main(int argc, char *argv[])
 
 	g_option_context_free(context);
 
-	if (option_version == TRUE) {
+	if (option_version == TRUE) 
+	{
 		printf("%s\n", VERSION);
 		exit(0);
 	}
@@ -2407,14 +2600,29 @@ int main(int argc, char *argv[])
 	main_loop = g_main_loop_new(NULL, FALSE);
 	dbus_conn = g_dbus_setup_bus(DBUS_BUS_SYSTEM, NULL, NULL);
 
-	setlinebuf(stdout);
-	rl_attempted_completion_function = cmd_completion;
+	/* axiom patch, allow unix socket command interface */
+	if(us_use_unix_socket_backend)
+	{
+		/* open unix socket */
+		if (unix_socket_backend_open(argv[2]) == -1)
+			exit(EXIT_FAILURE);
+		
+		/* instead of cli interface, use 1s timeout to process incoming commands */
+		g_timeout_add (PROCESSING_PERIOD_ms , unix_socket_backend_process , argv[2]);
+	}
+	else
+	{
+	/* axiom patch end */
+
+		setlinebuf(stdout);
+		rl_attempted_completion_function = cmd_completion;
 
-	rl_erase_empty_line = 1;
-	rl_callback_handler_install(NULL, rl_handler);
+		rl_erase_empty_line = 1;
+		rl_callback_handler_install(NULL, rl_handler);
 
-	rl_set_prompt(PROMPT_OFF);
-	rl_redisplay();
+		rl_set_prompt(PROMPT_OFF);
+		rl_redisplay();
+	}
 
 	signal = setup_signalfd();
 	client = g_dbus_client_new(dbus_conn, "org.bluez", "/org/bluez");
@@ -2444,6 +2652,11 @@ int main(int argc, char *argv[])
 	g_list_free_full(ctrl_list, proxy_leak);
 
 	g_free(auto_register_agent);
+	
+	/* axiom patch, allow unix socket command interface */
+	if(us_use_unix_socket_backend)
+		unix_socket_backend_close();
+	/* axiom patch end */
 
 	return 0;
 }
