--- config.c.orig
+++ config.c
@@ -4263,6 +4263,9 @@
 	{ INT(dot11RSNAConfigPMKLifetime), 0 },
 	{ INT(dot11RSNAConfigPMKReauthThreshold), 0 },
 	{ INT(dot11RSNAConfigSATimeout), 0 },
+	/** axiom patch **/
+	{ INT(enable_all_networks_at_startup), 0 },
+	/** end axiom patch **/
 #ifndef CONFIG_NO_CONFIG_WRITE
 	{ INT(update_config), 0 },
 #endif /* CONFIG_NO_CONFIG_WRITE */
--- config.h.orig
+++ config.h
@@ -601,6 +601,22 @@
 	 */
 	unsigned int dot11RSNAConfigSATimeout;
 
+	/** axiom patch **/
+	/**
+	 * enable_all_networks_at_startup - force all networks to be enabled
+	 * 
+	 * Allows wpa_supplicant to automatically connect to any of known
+	 * networks at startup, even if they are disabled. When user connects
+	 * to a network, wpa_supplicant will automnatically disable all other
+	 * networks. As a result, on next startup, wpa_supplicant won't even
+	 * try to connect to them, even if they are in range, and available
+	 * in scan resuults. 
+	 * 
+	 * enable_all_networks_at_startup=1 is axiom specific feature
+	 */
+	int enable_all_networks_at_startup;
+	/** end axiom patch **/
+
 	/**
 	 * update_config - Is wpa_supplicant allowed to update configuration
 	 *
--- wpa_supplicant.c.orig
+++ wpa_supplicant.c
@@ -4738,6 +4738,25 @@
 		return -1;
 	}
 
+	/** axiom patch **/
+	/** enables all configured networks found in the configuration file
+	 *  so wpa_supoplicant can connect to any of them, at startup
+	 **/
+	if (wpa_s->conf->enable_all_networks_at_startup)
+	{
+		wpa_printf(MSG_DEBUG, "Axiom patch: Interate over configured \
+		    networks and enable all of them, before wpa_supplicant \
+		    tries to connect to any of them");
+		struct wpa_ssid *ssid;
+		for (ssid = wpa_s->conf->ssid; ssid; ssid = ssid->next)
+		{
+			wpa_printf(MSG_DEBUG, "Enabling: id=%d ssid=%s", ssid->id,
+			    wpa_ssid_txt(ssid->ssid, ssid->ssid_len));
+			ssid->disabled = 0;
+		}
+	}
+	/** end axiom patch **/
+
 	if (iface->ifname == NULL) {
 		wpa_printf(MSG_ERROR, "\nInterface name is required.");
 		return -1;
