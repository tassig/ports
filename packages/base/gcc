package_name=gcc
package_version=6.1.0
build_dependencies=



musl_version=1.1.16
musl_fullname=musl-$musl_version


# TODO: gcc still has /usr/local/include in the include path and /usr/lib in the lib path
# see gcc -v and gcc -print-search-dirs

custombuild(){
	ARCH=`uname -m`
	packagename=$package_name-$package_version
	target_triple=$ARCH-longhorn-linux-musl
	
	# do binutils
	
	wget http://mirrors.tassig.com/binutils/binutils-2.26.tar.bz2
	tar xvf binutils-2.26.tar.bz2
	mkdir objdir
	cd objdir
	../binutils-2.26/configure --prefix=$installdirectory/$packagename \
                               --with-lib-path=/lib \
                               --build=$target_triple \
                               --disable-werror \
                               --disable-nls
	make -j
	#make check
	make install
	cd ..
	rm -r objdir
	
	
	
	# do musl libc in /lib
	# TODO: musl could simply be installed from ports.git as part of the dependencies
	
	git clone http://mirrors.tassig.com/repos/musl.git musl && cd musl && git checkout tags/v$musl_version
	tar xvf $musl_fullname.tar.gz
	cd $musl_fullname
	./configure --prefix=$installdirectory/$packagename/$target_triple
	make -j
	make install
	cp $installdirectory/$packagename/$target_triple/lib/libc.so /lib/ld-musl-$ARCH.so.1
	echo "$installdirectory/$packagename/$target_triple/lib/" > /etc/ld-musl-$ARCH.path
	echo "$installdirectory/$packagename/lib64" >> /etc/ld-musl-$ARCH.path
	echo "/lib" >> /etc/ld-musl-$ARCH.path
	cd ..
	rm -r musl*

	
	
	# do gcc
	
	wget http://mirrors.tassig.com/gcc/$packagename.tar.bz2
	tar xvf $packagename.tar.bz2
	cd $packagename/
	contrib/download_prerequisites
	
	echo "echo '$target_triple'" > config.guess
	cp -f config.guess mpc/config.guess
	cp -f config.guess isl/config.guess
	cp -f config.guess gmp/config.guess
	cp -f config.guess mpfr/config.guess
	cp -f config.guess config.sub
	cp -f config.sub mpc/config.sub
	cp -f config.sub isl/config.sub
	cp -f config.sub gmp/config.sub
	cp -f config.sub mpfr/config.sub
	
	# NOTE: can also add the unofficial gcc patches for advanced features
	mkdir patches-$packagename
	cd patches-$packagename
	wget http://mirrors.tassig.com/gcc/gcc-6.1.0/0001-cilkrts.patch
	wget http://mirrors.tassig.com/gcc/gcc-6.1.0/0002-posix_memalign.patch
	wget http://mirrors.tassig.com/gcc/gcc-6.1.0/0003-libgcc_s.patch
	wget http://mirrors.tassig.com/gcc/gcc-6.1.0/0004-linux_libc_has_function.patch
	wget http://mirrors.tassig.com/gcc/gcc-6.1.0/0005-nopie.patch
	wget http://mirrors.tassig.com/gcc/gcc-6.1.0/0006-ssp_nonshared.patch
	wget http://mirrors.tassig.com/gcc/gcc-6.1.0/targetlib-test-fix.diff
	cd ../
	for file in patches-$packagename/* ; do patch -p1 -i $file ; done

	cd ..
	mkdir gccobjdir
	cd gccobjdir
	
	# --disable-gnu-indirect-function: indirect-function is used by some code that replaces C library functions like malloc(), for example gn of chromium, but this is not supported by musl
	# TODO: --disable-multilib should be removed, if we can. Creating 32bits executables can be useful
	../gcc-6.1.0/configure --prefix=$installdirectory/$packagename \
                           --enable-languages=c,c++ \
                           --with-native-system-header-dir=$installdirectory/$packagename/$target_triple/include \
                           --disable-multilib \
                           --disable-nls \
                           --disable-libsanitizer \
                           --disable-libcilkrts \
                           --disable-gnu-indirect-function
	ln -sv $installdirectory/$packagename/$target_triple/lib/*.o /lib/   # hack to pass the bootstrap stage, some configure scripts probably incorrect TODO: could be patched
	make --debug -j4
	rm /lib/*.o   # previous hack clean up
	#make -k check -j
	make install
	cd ..
	rm -r gccobjdir
	
	
	# do musl libc again, this time it will use the new compiler
	# TODO: same, can get it from ports.git
	
	git clone http://mirrors.tassig.com/repos/musl.git musl && cd musl && git checkout tags/v$musl_version
	tar xvf $musl_fullname.tar.gz
	cd $musl_fullname
	./configure --prefix=$installdirectory/$packagename/$target_triple
	make -j
	make install
	cp $installdirectory/$packagename/$target_triple/lib/libc.so /lib/ld-musl-$ARCH.so.1
	cd ..
	rm -r musl*
	
	
	
	# NOTE: to use this toolchain properly, you need to link some kernel headers as follows:
	# ln -sv /opt/linux-kernel-headers/include/* /opt/$GCC_TOOLCHAIN_NAME/$ARCH-longhorn-linux-musl/include/ || true
	# cp -r /opt/linux-kernel-headers/include/scsi/* /opt/$GCC_TOOLCHAIN_NAME/$ARCH-longhorn-linux-musl/include/scsi
	
}

