package_name=llvm
package_version=3.8.0
tarball_suffix=xz
url=http://llvm.org/releases/3.8.0/llvm-3.8.0.src.tar.xz
build_dependencies=cmake
iscustombuild=1

# for c++ to work, link /opt/native-compiler/x86_64-linux-musl/lib64/* to /lib
# TODO: there might be better ways to do it
#
# for building LLVM, the native gcc-musl toolchain works, provided we apply some compatibility patches
# we set the CC and CXX variables to gcc and g++ of this toolchain, that's all
#
# the gcc-glibc toolchain doesn't work at compiling llvm, some bugs...

custombuild(){
        package_fullname=$package_name-$package_version
        package_tarball_name=$package_fullname.src.tar.$tarball_suffix
        rm $package_tarball_name
        wget $url
        tar xvf $package_tarball_name
	cd $package_fullname.src
	for p in ../packages/llvm-*.patch; do
		patch -p1 < $p
	done
	cd ..
	mkdir llvm-build
	cd llvm-build
	
	# change to a native musl-based gcc instead of the musl-gcc wrapper we usually use
	export OLDCC=$CC   # saving the old CC variable
	export CC=/opt/native-compiler/bin/x86_64-linux-musl-gcc
	export CXX=/opt/native-compiler/bin/x86_64-linux-musl-g++
	
	#../$package_fullname.src/configure --prefix=/opt/$package_fullname/
	cmake -DCMAKE_INSTALL_PREFIX=/opt/$package_fullname/ -DBUILD_SHARED_LIBS=ON ../$package_fullname.src/

	make -j
	make install
	ln -sv /opt/$package_fullname /opt/$package_name
	ln -sv /opt/$package_name/bin/* /bin/
	cd ..
	
	export CC=$OLDCC   # restoring the old CC variable
	unset OLDCC
	unset CXX
}

