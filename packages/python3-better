package_name=Python
package_version=3.7.4
tarball_suffix=xz
rel_url=python/$package_name-$package_version.tar.$tarball_suffix  # TODO: normalize
build_dependencies="libressl libffi"
no_check=1   # don't hesitate to fix it


# NOTE: for ssl support, it is necessary to have the latest libressl from ports.git, the old one won't work for ssl support

# NOTE: a user-only build won't work out of the box, because the build has a hack and writes on /usr
#       to do a user-only build, you need to do this hack as root, then do the build manually

# custom build because of rpath for libressl, zlib and libffi
# also because of a hack to find zlib headers
custombuild() {
	builddir="builddir-$package_fullname"  # build directory is "builddir" followed by the name of the package, which allows multiple builds of different software in parallel
	rm -rf $builddir
	mkdir -p $builddir   # do everything in builddir for tidiness
	cd $builddir
	wget -O archive $url
	tar xvf archive
	rm archive
	cd *   # cd into the package directory
	
	
	# hack to help python to find include files
	mkdir -p /usr/local/include
	ln -sv /opt/zlib/include/* /usr/local/include/
	
	export CFLAGS="-I/opt/libffi/lib/libffi-3.2"
	export LDFLAGS="-Wl,-rpath=/opt/libressl-2.9.1/lib -Wl,-rpath=/opt/zlib/lib -L /opt/zlib/lib -L/opt/libffi-3.2/lib64 -Wl,-rpath=/opt/libffi-3.2/lib64"
	./configure --prefix=$installdirectory/Python-$package_version
	
	ncpu=`cat /proc/cpuinfo | grep processor | wc -l`
	make -j$ncpu
	
	
	rm -r /usr

	if test -z $no_check   # run the make check, unless $no_check is set for 
						   # this package definition
	then make -j check || make -j test
	fi
	make install
	
	
	
	# we add the symlinks directly
	# we overwrite existing symlinks
	ln -svf $installdirectory/$package_fullname/bin/* /bin/ || true   # don't crash if the links are already there
	
	
	if [ -d "$installdirectory/$package_fullname/lib/pkgconfig" ]; then
		ln -svf $installdirectory/$package_fullname/lib/pkgconfig/* $installdirectory/pkgconf/lib/pkgconfig/   # install pkg-config files
	fi
	cd ../..
	rm -r builddir
}

postinstall() {

	# upgrade pip
	pip3 install --upgrade pip

	# we add the symlinks manually
	# Python 3 has binaries names that do not conflict with other versions of Python, so we can symlink them directly. This is necessary because Python 3 may not have the symlink /opt/Python, so the default build will not put its binaries into /bin
	ln -sf $installdirectory/$package_fullname/bin/* $bindirectory || true
}

# NOTE: python3 does not create a binary named "python", instead it is named "python3"
